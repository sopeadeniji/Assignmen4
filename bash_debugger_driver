# bashdb - a bash debugger
# Driver Script: concatenates the preamble and the target script
# and then executes the new script.

echo 'bash Debugger version 1.0'
_dbname=${0##*/}
if (( $# < 1)) ; then
echo "$_dbname: Usage: $_dbname filename" > &2 exit 1
fi
_guineapig=$1
if [ ! -r $1 ]; then
echo "$_dbname: Cannot read file '$_guineapig'." > & 2 exit 1
fi
shift
_tmpdir=/tmp
_libdir=.
_debugfile=$_tmpdir/bashdb.$$ # temporary file for script that is being debugged
cat $_libdir/bashdb.pre $_guineapig > $_debugfile 
exec bash $_debugfile $_guineapig $_tmpdir $_libdir "$@"

# bashdb preamble

# This file gets prepended to the shell script being debugged. # Arguments:
# $1= the name of the original guinea pig script # $2 = the directory where temporary files are stored # $3 = the directory
# where bashdb.re and bashdb.fns are stored

_debugfile=$0 _guineapig=$1
_tmpdir=$2 _libdir=$3
shift 3
source $_libdir/bashdb.fns_linebp=
let _trace=0 let _i=1
while read; do
_lines[ $_1] =$REPLY let _i=$_i+1
done < $_guineapig
trap _cleanup EXIT
let _steps=1
trap '_steptrap $(( $LINENO -29 ))' DEBUG

# After each line of the test script is executed the shell traps to # this function.
function _steptrap {
_curliine=$1        
# the number of the line that just ran
(( $_trace )) && _msg "$PS4 line $_curline: ${_lines[ $_curline]}"
if (( $_steps >= 0 )); then let _steps="$_steps - 1" fi
# First check to see if a line number breakpoint was reached. # If it was, then enter the debugger.
if _at_linenumbp ; then
_msg "Reached breakpoint at line $_curline" _cmdloop
# It wasn't, so check wether a break condition exists and is true. # If it is, then enter the debugger.
elif [ -n "$_brcond"] && eval $_brcond; then _msg "Break condition $_brcond true at line $_curline" _cmdloop
#It wasn't, so check if we are in step mode and the number of steps # is up. If it is then enter thr debugger.
elif (( $_steps == 0 )); then _msg "Stopped at line $_curline" _cmdloop
fi
}

# The Debugger Command Loop
function _cmdloop { local cmd args
while read -e -p "bashdb> "cmd rgs; do 
    case $cmd in
        \? | h ) _menu ;;           # print command menu 
        bc ) _setbc $args ;;        #set a break condition 
        bp ) _setbp $argds ;;       #set a breakpoint at the given 
                                    # line
        cb ) _clearbp $args ::      # clear one or all breakpoints 
        ds ) _displayscript ;;      # lst the script and show the 
                                    #breakpoints
         g ) return ;;              # "go": strat/resume execution of the 
                                    # the script
         q ) exit ;;                # quit
         s ) let _steps=${ args:-1} #single step N times 
                                    # (default - 1)
            return ;;
         x ) _xtrace ;                  # toggle execution trace 
        !* ) evals ${cmd#!} $args ;;    # pass to the shell
         * ) _msg "Invalid comand:           '$cmd'" ;;
       esac
    done
}

# Set a breakpoint at the given line number or list breakpoints function _setbp
(
local i

if [ -z "$1" ]; then _listbp
elif { $(echo $1 | grep '^[0-9]*') ]; then 
if [ -n "${_lines[ $1]}"]; then
    _linebp=($(echo $( (for i in ${_linebp[*]} $1; do 
            echo $1; done) | sort -n) )) 
_msg "Breakpoint set at line $1"
else 
fi
_msg "Breakpoints can only be set on non-blank lines"
_msg "Please specify a numeric line number"
fi

function _clearbp 
{
        local i

if [ -z "$1"}; then 
    unset _linebp[*]
    _msg "All breakpoints have been cleared"
elif [ $(echo $1 | grep '^[0-9]*') }; then 
    _linebp=($(echo $(for i in $(_linebp[*]}; do 
        if (($1 !=$i)); then echo $i; fi; done) )) 
    _msg "Breakpoint cleared at line $1"
else
    _msg "Please specify a numeric line number"
fi
}

# See if this line number has a breakpoint 
function _at_linenumbp 
{
    local i=0

if [ "$_linebp"}; then 
    while (($1 < ${#_linebp[@]} 00; do 
    if (( $(_linebp[$i]} == $_curline )); then 
        return 0
    fi
    let i=$i+1 
  done
fi
    return 1
}

# Print out the shell script and mark the location of breakpoints 
# and the current line 
functon _displayscript 
{
        local i=1 j=0 bp cl

        ( while (($1<${#_Lines[@]} )); do
             if [ ${_linebp{$j]} } && ((${_linebp[$j]} == $1)); then 
                bp='*'
                let j=$j+1
            else
                bp=' '
            fi

            if (( $_curline == $i )); then 
                cl=">"
            else
                cl=" "
            fi
            echo "$1:$bp $cl ${_lines[$1]}" 
            let i=$i+1
        done
     ) | more
}

After each line of the test script is executed the shell traps to 
# this function.

function_steptrap
{
_curline=$1         # the number of the line that just ran

(( $_trace )) && _msg "$PS4 line $_curline: $[_lines[$_curline]}"

if (( $_steps >= 0 )); then 
    let _steps="$_steps - 1" 
fi

# First check to see if a line number breakpoint was reached. 
# If it was, then enter the debugger.
if _at_linenumbp ; then
   _msg "Reached breakpoint at line $_curline" 
   _cmdloop

# It wasn't, so check whether a break condition exists and is true. 
# If it is, then enter the debugger
elif [ -n "$_brcond"] && eval $_brcond; then 
      _msg "Break condtion $_brcond true at line $_curline"
      _cmdloop

# It wasn't, so check if we are in step mode and the number of 
# steps is up. If it is, then enter the debugger.
elif (( $_steps == 0)); then 
      _msg "Stopped at line $_curline"
      _cmdloop
    fi
}


# The Debugger Command Loop

function _cmdloop { 
    local cmd args

    while read -e -p "bashdb> " cmd args; do 
      case $cmd in
        \? | h ) _menu ;;           # print command menu
        bc ) _setbc $args ;;        # set a break condition
        bp ) _setbp $args ;;        # set a breakpoint at the given line
        cb ) _clearbp $args ;;      # clear one or all breakpoints
        ds ) _displayscript ;;      # list the script and show the 
                                    # breakpoints
        g  ) return ;;              #"go": start/resume execution of 
                                    # the script
        q  ) exit ;;                # quit
        s  ) let _steps=${ args:-1} # single step N times (default = 1) 
             return ;;
        x  ) _xtrace ;;            # toggle execution trace
        * ) eval $(cmd#!) $args ;; # pass to the shell 
*  ) _msg "invalid command: '$cmd'" ;; 
    esac
done
}



# See if this line number has a breakpoint 
function _at_linenumbp 
{
        local i=0
        # Loop through the breakpoints array and check to see if any of 
        # them match the current line number. If they do return true (0) 
        # otherwise return false.

If [ "$_linebp" ] ; then
        while (( $i < ${#_linebp[ @]} )); do 
            if (( ${_linebp[ $i]} == $_curlline )); then 
                return 0
            fi
            let i=$i+1
        done
     fi
     return 1
}



# Set a breakpoint at the given line number or list breakpoints 
function _setbp
{
    local i
# If there are no arguments call the breakpoint list function. 
# Otherwise check to see if the argument was a positive number.
# If it wasn't then print an error message. If it was then check
# to see if the line number contains text. If it doesn't then 
# print an error message. If it does then echo the current #
# breakpoints and the new addition and pipe them to "sort" and 
# assign the result back to the list of breakpoints. This results
# in keeping thee breakpoints in numerical sorted order.

# Note that we can remove duplicate breakpoints here by using 
# the -u option to sort which uniquifies the list.


if [ -z "$1"] ; then 
    _listbp
elif [ $(echo $1 | grep '^[0-9]*') ]; then 
    if [ -n "${_lines[$1]}"]; then
        _linebp=($(echo $( (for i in ${_linebp[*]} $1; do 
                 echo $i; done) | sort -n) )) 
        _msg "Breakpoint set at line $1"
    else
        _msg "Breakpoints can only be set on non-blank lines"
    fi
 else
    _msg "Please specify numerics line number"
fi
}



# List breakpointd and break conditions 
function _listbp 
{
    if [ -n "$_linebp"]; then
        _msg "Breakpoints at lines: ${_linebp[*]}"
    else
        _msg "No breakpoints have been set"
    fi


    _msg "Break on condtion:"
    _msg "$_brcond"
}



# Clear individual or all breakpoints 
function _clearbp 
{
local i bps

# If there are no arguments, then delete all the breakpoints. 
# Otherwise, check to see if the argument was a positive number.
# If it wasn't, then print an error message. If it was, then 
# echo all of the current breakpoints except the passed one 
# and assign them to a local variable. (We need to do this because 
# assigning them back to _linebp would keep the array at the same 
# size and just move the values "back" one place, resulting in a 
# duplicate value). Then destroy the old array and assign the 
# elements of the local array, so we effectively recreate it, 
# minus the passed breakpoint.


if [ -z "$1"]; then 
    unset _linebp[*]
    _msg "All breakpoints have been cleared" 
elif [ $(echo $1 \| grep '^[0-9]*') ]; then 
      bps=($(echo $(for i in ${_linebp[*]}; do
            if (( $1 != $i )); then echo $i; fi; done) )) 
      unset _linebp[*]
     _linebp=(${bps[*]})
     _msg "Breakpoint cleared at line $1"
else
     _msg "Please specify a numeric line number"
    fi
}


# Set or clear a break condition 
function _setbc 
{
        if [ -n "$*"]; then 
            _brcond=$args
            _msg "Break when true; $_brcond"
        else
            _brcond=
            _msg "Break condition cleared"
        fi
}


# Print out the shell script and mark the locatio of breeakpoints 
# and the current line 

function_displayscript 
{
        local i=1 j=0 bp cl

        ( while (( $i < ${#_lines[@]} )); do
            if [ ${_linebp[$j]0 } && (( ${_linebp[$j]} == $i )); then
                bp='*'
                let j-$j+1
            else
                bp=' '
            fi
            if (( $_curline == $1 )); then 
                cl=">"
            else
                cl=" "
            fi
echo "$i:$bp $cl ${_lines[$i]}' 
let i=$i+1
done 
    ) | more
}


# Toggle execution trace on/off 
function _xtrace 
{
    let _trace="! $_trace" 
    _msg "Execution trace " if (( $_trace )): then 
        _msg "on"
    else
        _msg "off"
    fi
}


# Print the passed argumwnts to Standard Error 
function _msg
{
    echo -e "$@" >&2
}


# Print command menu 
functon _menu { 
    _msg 'bashdb commands:
            bp N                set breakpoint at line N    
            bp                  list breakpoints and break condition 
            bc string           set break condition to string 
            bc                  clear break condition 
            cb N                clear breakpoint at line N 
            cb                  clear all breeakpoints 
            ds                  displays the test script and breakpoints 
            g                   start/resume executions 
            s[N]                execute N statements (default 1) 
            x                   toggle execution trace on/off 
            h, ?                print this menu 
            ! string            passes string to a shell 
            q                   quit'
}


# Erase the temporary file before exiting
function _cleanup
{
       rm S_debugfile 2>/dev/null
}
